import com.amazonaws.auth.*
import com.amazonaws.auth.profile.*

group 'codes.rik.window'
version '0.1'

def fetchAwsCredentials = {
    try {
        return new DefaultAWSCredentialsProviderChain().credentials
    } catch (Exception exception) {
        logger.warn('Unable to retrieve AWS credentials from profile')
        return null
    }
}

buildscript {
    ext.kotlin_version = '1.2.10'
    ext.jackson_version = '2.9.3'
    ext.protobuf_version = '3.5.1'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.amazonaws:aws-java-sdk-core:1.11.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4' // using old version for AWS old Gradle compat
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.2'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.google.protobuf'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()

    def defaultCredentials = fetchAwsCredentials()
    if (defaultCredentials != null) {
        logger.info("Got AWS credentials, adding S3 repo")
        ivy {
            url "s3://window-artifacts-repo/gradle-ivy/"
            credentials(AwsCredentials) {
                accessKey defaultCredentials.getAWSAccessKeyId()
                secretKey defaultCredentials.getAWSSecretKey()
            }
            layout "pattern", {
                artifact "[artifact]-[revision].[ext]"
            }
        }
    }
}

protobuf {
    protoc {
        // Download from repositories
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }
}

dependencies {
    protobuf (
        'codes.rik.window:api-models:0.1'
    )

    compile (
        fileTree(dir: 'jars', include: '*.jar'),

        // Kotlin
        "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version",

        // AWS
        'com.amazonaws:aws-lambda-java-core:1.1.0',
        'com.amazonaws:aws-lambda-java-log4j:1.0.0',

        // Jackson
        "com.fasterxml.jackson.core:jackson-core:$jackson_version",
        "com.fasterxml.jackson.core:jackson-databind:$jackson_version",
        "com.fasterxml.jackson.core:jackson-annotations:$jackson_version",
        "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version",
        'com.hubspot.jackson:jackson-datatype-protobuf:0.9.5',

        // Logging
        'io.github.microutils:kotlin-logging:1.4.8',
        'org.slf4j:slf4j-log4j12:1.7.25',

        // Protobufs
        "com.google.protobuf:protobuf-java:$protobuf_version",
        "com.google.protobuf:protobuf-java-util:$protobuf_version",

        // Guava
        'com.google.guava:guava:23.6-jre',
    )

}

sourceSets {
    // add protobufs to kotlin source directories too
    main.kotlin.srcDirs "${protobuf.generatedFilesBaseDir}/main/java"
}

compileKotlin {
    dependsOn('generateProto') // ensure protobufs generated beforehand
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        // If you have additional sourceSets and/or codegen plugins, add all of them
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/grpc")
    }
}
